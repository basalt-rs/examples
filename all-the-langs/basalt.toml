# Generated by basalt-cli
#
# This basic example just includes a custom language and a supported language,
# two competitors, a host, a single problem, and some sane runner configurations.
#
# There are also examples showing how you could instead import pieces for a multi-file config setup.
#
# Happy hacking!

port = 8517

# state whether the server should expose a web client
web_client = true

[setup]
# import = "./setup.toml"

# install = { import = "./install.sh" }
install = '''
dnf install -y opam ruby go gcc gcc-c++ ghc
# Install scala-cli
curl -sSLf https://scala-cli.virtuslab.org/get | sh
# init opam for the first time
opam init -y
'''

# init = { import = "./init.sh" }
init = '''
eval $(opam env)
alias nodejs="node-20"
'''

[test_runner]
# import = "./test-runner.toml"

timeout = "60s"
trim_output = true
max_memory = { compile = 128, run = 64 }
max_file_size = 8192

[languages]
python3 = "latest"
rust = "latest"
java = "21"
javascript = "latest"
typescript = { run = "node-20 solution.ts", source_file = "solution.ts" }
go = { build = "go build -o out main.go", run = "./out", source_file = "main.go" }
ocaml = { build = "ocamlc -o out solution.ml", run = "./out", source_file = "solution.ml" }
ruby = { run = "ruby solution.rb", source_file = "solution.rb" }
c = { build = "gcc -o out main.c", run = "./out", source_file = "main.c" }
cpp = { build = "g++ main.cpp -o out", run = "./out", source_file = "main.cpp" }
haskell = { build = "ghc -o out solution.hs", run = "./out", source_file = "solution.hs" }
scala = { build = "scala-cli --power package main.scala -o out", run = "./out", source_file = "main.scala" }

[[accounts.hosts]]
name = "host"
password = "pwd1"

[[accounts.competitors]]
name = "team1"
password = "pwd1"

[[accounts.competitors]]
name = "team2"
password = "pwd1"

# Specify information about the packet itself
[packet]
# import = "./packet.toml"
title = "basalt"
preamble = '''
This packet includes problems of a difficulty *vastly*
surpassing the capabilities of the average computer
science student. Be wary as these problems will
certainly give you great intellectual trouble. There
is little hope for anyone without a Ph.D in computer
science.

If you decide to attempt these problems anyways, good
luck. You will be rewarded for swiftness in your answers.
'''

[[packet.problems]]
# import = "./problem1.toml"
title = "Reversing a string"
description = '''
Reversing a string is one of the most *basic* algorithmic
problems for a beginner computer science student to solve.

Solve it.
'''

[[packet.problems.tests]]
input = "hello"
output = "olleh"
visible = true

[[packet.problems.tests]]
input = "world"
output = "dlrow"
visible = true

[[packet.problems.tests]]
input = ""
output = ""

[[packet.problems.tests]]
input = "aa"
output = "aa"

[[packet.problems.tests]]
input = "racecar"
output = "racecar"
